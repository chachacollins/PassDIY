package cmds

import (
	"fmt"
	"strconv"
)

const (
	LOTTERY_WHEEL_COUNT  int    = 100 // how many times you want to generate token/password/pins to randomly pick one (pass100, pass10000)
	CONFIG_PASS_DESC     string = "Configure password char length"
	CONFIG_PIN_DESC      string = "Configure pin digit length"
	CONFIG_TOKEN_DESC    string = "Configure token char length"
	CONFIG_PWP_WORD_DESC string = "Configure number of words in passphrase"
	CONFIG_SALT_DESC     string = "Configure number of extra chars to append to password/token"
	CONFIG_MULTI_DESC    string = "Configure number of multiple password/token/pins generated by passdiy"
)

var (
	PIN_DIGIT_LENGTH      int = 6  // number of ints in pin digit
	API_TOKEN_CHAR_LENGTH int = 60 // number of chars in a API token
	PASSWORD_CHAR_LENGTH  int = 40 // number of chars in a password
	PASSPHRASE_COUNT_NUM  int = 5  // number of words in passphrase
	MULTIPLE_VALUE_COUNT  int = 5  // how many password/tokens you want to output
	SALT_EXTRA_LENGTH     int = 10 // how many extra chars you want to add to a password/token
)

func GetPassDiyMessage(val int, command string) string {
	return fmt.Sprintf("PassDIY: Successfully Set %s to %d", command, val)
}

func Converter(val string) (int, error) {
	valv, err := strconv.Atoi(val)
	if err != nil {
		return -1, err
	}
	return valv, nil
}

func SetPinLength(val string) string {
	valv, err := Converter(val)
	if err != nil {
		return "Invalid digit length, please enter a number"
	}
	PIN_DIGIT_LENGTH = valv
	return GetPassDiyMessage(valv, "pin digit length")
}

func SetAPITokenLength(val string) string {
	valv, err := Converter(val)
	if err != nil {
		return "Invalid digit length, please enter a number"
	}
	API_TOKEN_CHAR_LENGTH = valv
	return GetPassDiyMessage(valv, "token char length")
}

func SetPasswordLength(val string) string {
	valv, err := Converter(val)
	if err != nil {
		return "Invalid digit length, please enter a number"
	}
	PASSWORD_CHAR_LENGTH = valv
	return GetPassDiyMessage(valv, "password char length")
}

func SetPwpWordCount(val string) string {
	valv, err := Converter(val)
	if err != nil {
		return "Invalid digit length, please enter a number"
	}
	PASSPHRASE_COUNT_NUM = valv
	return GetPassDiyMessage(valv, "pwp word count")
}

func SetMulCount(val string) string {
	valv, err := Converter(val)
	if err != nil {
		return "Invalid digit length, please enter a number"
	}
	MULTIPLE_VALUE_COUNT = valv
	return GetPassDiyMessage(valv, "multiple token/pin/password count")
}

func SetSaltLength(val string) string {
	valv, err := Converter(val)
	if err != nil {
		return "Invalid digit length, please enter a number"
	}
	SALT_EXTRA_LENGTH = valv
	return GetPassDiyMessage(valv, "salt char length")
}
